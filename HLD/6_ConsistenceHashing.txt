Consistent Hashing

Hashing::

Key="anyValue"    hashFunction()----->gives some integer value(hash number)
------->

Mod Hashing:: In this we have a table of fixed size.


What is the problem?

If size of table is fixed hashing is perfectly fixed.

If size of table is not fixed.

Example:
Load Balancing for application Server

      |key
      |
      LB  --> using mod hashing

APP1  APP2   APP3

Horizontal Sharding

We will create multiple DB's




In normal hashing if the size of node increase or decrease then we have to do millions of data rebalancing.

Consistency::

Relalancy will (1/n)% of toatl no of keys.



How consistence Hashing works::

It takes a virtual ring.

We divide the servers by taking mod onto the ring.

Then we divide the keys on the virtual ring.


Now we need to move clockwise and check in which server it will go

A ring from 0 to 11.

S1 -->3
S2--> 7
S3--> 11
K1-->1,K2-->2, K3-->9,K4-->10,K5-->6
K6-->8,K7-->4

S1--> K1,K2
S2--> K5,K7
S3--> K6,K3,K4



Addition of Sever::
If we add one more  server

S1 -->3
S2--> 7
S3--> 11
S4--> 5
K1-->1,K2-->2, K3-->9,K4-->10,K5-->6
K6-->8,K7-->4

S1--> K1,K2
S2--> K5
S3--> K6,K3,K4
S4--> K7


Deletion of Server::

S1 -->3
S3--> 11
S4--> 5
K1-->1,K2-->2, K3-->9,K4-->10,K5-->6
K6-->8,K7-->4

S1--> K1,K2
S3--> K6,K3,K4,K5
S4--> K7

Disadvantage of Consistent Hashing

S1--> 2
S2--> 3
S3--> 4

K1-->8,K2-->9,K3-->10,K4-->11,K5-->0,K6-->1

S1--> K1,K2,K3,K4,K5,K6



Virtual Object

Replicate Servers at different position

S1--> 2,8,11
S2--> 3,6,10
S3--> 4,1,9

K1-->0,K2-->1,K3-->11,K4-->8,K5-->7,K6-->5
K7-->6

S1--> K4,K5,K3
S2--> K6,K7
S3---> K1,K3




Article::

https://medium.com/@adityashete009/consistent-hashing-amazon-dynamodb-part-1-f5719aff7681






