Flyweight Design Pattern (Structural Design Pattern)


Two import Interview questions:

1. Design Word Processor/Text Editor
2. Design Game




Definition::

1. It's one of the Structural Design Pattern.
2. This Pattern helps to reduce the memory usage by sharing data among multiple
    objects.



Let's first see the issue for Gaming Scenario:


public class Robot {
 
int coordinateX;
int coordinateY;
String type;
Sprites body; //small 2d bitmap (graphic element)

Robot(int x,int y,String type,Sprites body) {
  this.coordinateX = x;
  this.coordinateY = y;
  this.type = type;
  this. body = body;
 
}
//getters and setters

}


public class Sprites {

}



public class Main {

public static void main(String args[]) {

 int x = 0;
 int y = 0;
 for(int i=0;i<500000;i++) {
   
  Sprites humanoidSprite = new Sprites();
  Robot humanoidRobotObject = new Robot(x+i,y+i,"HUMANOID",humanoidSprite);
 }


 for(int i=0;i<500000;i++) {
   
  Sprites roboticDogSprite = new Sprites();
  Robot roboticDogObject = new Robot(x+i,y+i,"ROBOTIC_DOG",roboticDogSprite);
 }

 
}

}



Observe and understand, when to use this pattern:

1. When Memory is Limited.
2. When Objects shared data.
   Intrinsic data: shared among objects and remain same once defined one value.
   Extrinsic data: changes based on client input and differs from one object to
                 another.
3. Creation of Object is expensive.



This is How it solves the issue:

1. From Object, remove all the Extrinsic data and keep Intrinsic Data(this 
   object called Flyweight object).
2. This Flyweight Class can be immutable.
3. Extrinsic Data can be passed to the Flyweight class in method parameter.
4. Once the Flyweight Object is created, it is Cached and reused whenever
   required. 


public interface IRobot {
  
  public void display(int x,int y);

}

public class Sprites {

}


public class HumanoidRobot implements IRobot {

 private String type;
 private Sprites body;  //small 2d bitmap (graphic element)
 
 HumanoidRobot(String type, Sprites body) {
  this.type = type;
  this.body = body;
 }

 public String getType() {
   return type;
 }

 public Sprites getBody() {
  
   return body;
 }

@Override
public void display(int x ,int y) {
System.out.println("Humanoid Sprites : " +"X: "+ x +" Y: " +y);
  //use the humanoid sprites object
  //and X and Y coordinate to render the image.
}

}


public class RoboticDog implements IRobot {

private String type;
private Sprites body; //small 2d bitmap (graphic element)

RoboticDog(String type,Sprites body) {
 this.type = type;
 this.body = body;
}

public String getType() {

 return type;
}

public Sprites getBody() {

  return body;
}

@Override
public void display(int x,int y) {
 
System.out.println("Robotic Dog Sprites :" +" X: "+ x +" Y: " +y);
  //use the Robotic Dog sprites object
  //and X and Y coordinate to render the image.  
}

}


public class RoboticFactory {

private static Map<String,IRobot> roboticObjectCache = new HashMap<>();

public static IRobot createRobot(String robotType) {
 
if(roboticObjectCache.containsKey(robotType)) {
  return roboticObjectCache.get(robotType);
}
else {
   if(robotType == "HUMANOID") {
   Sprites humanoidSprite = new Sprites();
   IRobot humanoidObject = new HumanoidRobot(robotType,humanoidSprite);
   roboticObjectCache.put(robotType,humanoidObject);
   return humanoidObject;
  }
 else if(robotType == "ROBOTICDOG") {
   Sprites roboticDogSprite = new Sprites();
   IRobot robotticDogObject = new RoboticDog(robotType,roboticDogSprite);
   roboticObjectCache.put(robotType,robotticDogObject);
   return robotticDogObject;
  }
 
 }
 return null;
}

}


public class Main {

public static void main(String[] args) {
 
IRobot humanoidRobot1 = RoboticFactory.createRobot("HUMANOID");
humanoidRobot1.display(1,2);

IRobot humanoidRobot2 = RoboticFactory.createRobot("HUMANOID");
humanoidRobot2.display(10,30);

IRobot roboDog1 = RoboticFactory.createRobot("ROBOTICDOG");
roboDog1.display(2,9);

IRobot roboDog2 = RoboticFactory.createRobot("ROBOTICDOG");
roboDog2.display(11,19);

}

}


Lets first see the issue for Word Processor:


public class Character {

 char character;
 String fontType;
 int size;
 int row;
 int column;

 Character(char character,String fontType,int size,int row,int column) {
  this.character = character;
  this.fontType = fontType;
  this.size = size;
  this.row = row;
 }

 //getter and setters
}


public class Main {

public static void main(String args[]) {
 
/*
  this is the data we want to write into the word processor.
  Total = 58 characters
  t = 7 times
  h = 3 times
  a = 3 times and so on.....

*/

Character object1 = new Character('t','Arial',10,0,0);
Character object1 = new Character('h','Arial',10,0,1);
Character object1 = new Character('i','Arial',10,0,2);
Character object1 = new Character('s','Arial',10,0,3);

}

}


How to resolve this:

public interface ILetter {

 public void display(int row,int colum);
}



public class DocumentCharacter implements ILetter {

private char character;
private String fontType;
private int size;

DocumentCharacter(char character,String fontType,int size) {

  this.character = character;
  this.fontType = fontType;
  this.size = size;
}

//only getter methods

@Override
public void display(int row,int column) {

//display the character of particular font and size 
//at given location
 System.out.println("Character: " + character +" font: " + fontType +
               " Size: " + size +" row: " + row + " column: " + column);

}

}


public class LetterFactory {

 private static Map<Character,ILetter> characterCache = new HashMap<>();
 
 public static ILetter createLetter(char characterValue) {
  
  if(characterCache.containsKey(characterValue)) {
   
   return characterCache.get(characterValue);

  }
  else {
   DocumentCharacter characterObj = new DocumentCharacter(characterValue,"Arial",
                                        10);
   characterCache.put(characterValue,characterObj);
   return characterObj;
 }
  
 }
}


public class Main {

 public static void main(String [] args) {

/*
  this is the data we want to write into the word processor.
  Total = 58 characters
  t = 7 times
  h = 3 times
  a = 3 times and so on.....

*/

 ILetter object1 = LetterFactory.createLetter('t');
 object1.display(0,0);

 ILetter object2 = LetterFactory.createLetter('t');
 object2.display(0,6);

 }
}