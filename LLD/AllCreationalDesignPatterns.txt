Creational Design Pattern responsibility is to create objects/control
the creation of objects.



Types of Creational Patterns::


Prototype Pattern::

1. It is used when we have to make Copy/Clone from Existing Object.

When the new Object from scratch creation is expensing then we will
create the object from the existing one.


Lets Understand the Problem first::

public class Student {
   int age;
   private int rollNumber;
   String name;
   Student(int age,int rollNumber,String name)
    {
      this.age=age;
      this.rollNumber=rollNumber;
      this.name=name;
    }
}


public class Main {

 public static void main(String args[])
 {
      Student obj = new Student(20,76,"Ram");  //original Object

     //Creating Clone of Objects

      Student cloneObj = new Student();
      cloneObj.name = obj.name;
      cloneObj.age = obj.age;
      cloneObj.rollNumber = obj.rollNumber  //private member
 }
}



                      
                        Client
                         |
                         |
                         |
                         |
                      Prototype <<Interface>>
                         clone()
                 _______________________
                |          |            |
                |          |            |
               Class1     Class2       Class3
               clone()    clone()      clone()




public Class main {

  public static void main(String args[]) {
   
   Student obj = new Student(20,75,"Ram");
   Student cloneObj = Student obj.clone();

  }
 
}
      |
      |   
      |
public interface Prototype {

  Prototype clone();
}

      |
      |
      |
public class Student implements Prototype {

int age;
private int rollNumber;
String name;

Student(){
}

Student(int age, int rollNumber, String name) {
  this.age = age;
  this.rollNumber = rollNumber;
  this.name = name;
}

@Override
public Prototype clone() {
  return new Student(age,rollNumber,name);
}

}








Singleton Pattern


It is used when we have to create only 1 instance of the class.

4 Ways to achieve this::

1. Eager
2. Lazy
3. Synchronized Method
4. Double Locking


1. Eager Initialization:

public class DBConnection {

private static DBConnection conObject = new DBConnection();

private DBConnection() {

}

public static DBConnection getInstance() {
  return conObject;
}

}


public class Main {

public static void main(String args[]) {

DBConnection connObject = DBConnection.getInstance();
 
}
 
}




2. Lazy Initialization::

public class DBConnection {

 private static DBConnection conObject;

 private DBConnection() {

 }

 public static DBConnection getInstance() {
   
    if(conObject==null) { 
      conObject = new DBConnection();
    } 
    return conObject;
 } 
}



3.  Synchronized Method::

public class DBConnection {

 private static DBConnection conObject;

 private DBConnection() {
  
 }

synchronized public static DBConnection getInstance() {

   if(conObject == null) {
       conObject = new DBConnection();
   }
 
  return conObject;
}

}



4. Double Locking::

public class DBConnection {

 private static DBConnection conObject;

 private DBConnection() {
 
 }
 
public static DBConnection getInstance() {
 
   if(conObject == null) {
    synchronized (DBConnection.class) {
       if(conObject == null) {
        conObject = new DBConnection();
       }
    }
   }
   return conObject;
  }
}











Factory Pattern

It is used when all the object creation and its business logic we need to keep at one place.



Client --> Shape   --------------> Shape
           Factory                  |
                            ________|_________
                           |        |         |
                           |        |         |
                           Circle   Sqaure    Rectange





 public interface Shape {
    public void computeArea();
 } 



public class Square implements Shape {

  @Override
  public void computeArea() {
     System.out.println("Compute Sqaure Area");
  }
}


public class Circle implements Shape {

  @Override
  public void computeArea() {
   System.out.println("Compute Circle Area");
 }
}


public class Rectangle implements Shape {

  @Override
  public void computeArea() {
   System.out.println("Compute Circle Area");
 }
}


public class ShapeInstanceFactory {
 
   public Shape getShapeInstance(String value) {

    if(value.equals("Circle")
       return new Circle();
    else if(value.equals("Square")
         return new Square();
    else if(value.equals("Rectangle")
          return new Rectangle();

   return null;
  }
}


public class Main {

 public static void main(String args[]) {

  ShapeInstanceFactory factoryObj = new ShapeInstanceFactory();
  Shape circleObj = factoryObj.getShapeInstance("Circle");
  circleObj.computeArea();
 }
}







Abstract Factory Pattern


It is a Factory of Factory


Client --------> Abstract Producer
                     |
                     |
                     |
                    Abstract Factory
         _________________________________________
        |                                         | 
        |                                         |
       Economic                                   Luxury
       Car Factory                                Car Factory
        |                                         |
        |_________________________________________|
                         |
                         |
                         CAR
 _________________________________________________________
|         |         |           |           |             |
|         |         |           |           |             |
Economy Economy    Economy    Luxury      Luxury         Luxury
Car1    Car2       Car3        Car1         Car2          Car3     






public class AbstractFactoryProducer {
  
 public AbstractFactory getFactoryInstance(String value) {
    if(value.equals("Economic"))
            return new EconomicCarFactory();
    else if(value.equals("Luxury")||value.equls("Premium"))
           return new LuxuryCarFactory();

    return null;
 }
}


public interface AbstractFactory {

 public Car getInstance(int price);
}



public class EconomicCarFactory implements AbstractFactory {

@Override
public Car getInstance(int price) {
   
  if(price<=1000000)
   return new EconomicCar1();
  else if(price>1000000)
    return new EconomicCar2();
  return null;
 }
}



public class LuxuryCarFactory implements AbstractFactory {

@Override
public Car getInstance(int price) {
   
  if(price>=1000000 && price<=2000000)
   return new LuxuryCar1();
  else if(price>2000000)
    return new LuxuryCar2();
  return null;
 }
}



public interface Car {
 public int getToSpeed();
}


public class EconomicCar1 implements Car {

@Override
public int getToSpeed() {
   return 100;
 }
}


public class EconomicCar2 implements Car {

@Override
public int getToSpeed() {
   return 250;
 }
}



public class LuxuryCar1 implements Car {

@Override
public int getToSpeed() {
   return 150;
 }
}



public class LuxuryCar2 implements Car {

@Override
public int getToSpeed() {
   return 350;
 }
}




public class Main {

public static void main(String args[]) {

AbstractFactoryProducer abstractFactoryProducerObj = new AbstractFactoryProducer();

AbstractFactory abstractFactoryObj = abstractFactoryProducerObj.getFactoryInstance("Premium");

Car carObj = abstractFactoryObj.getInstance(5000000);

System.out.println(carObj.getToSpeed());
}

}
