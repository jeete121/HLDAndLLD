Decorator Pattern

When ever their is a base class with some features.
If we want to add some features to that base class, there we will
use decorator pattern.


   Base Class --->  New Class
    F1             F1+F2

In this New Class is also of the same type. So that we can decorate it again.


Why you need decorator pattern?

To avoid Class explosion


                                    
  Abstract                                   Abstract
 __________________                     ______________________
|BasePizza         |   has-a           |    Topping Decorator |
|__________________|--------------     |______________________|
|                  |  is-a             |                      |
| cost();          |--------------     |                      |
|                  |                   |                      |
|__________________|                   |______________________|
 
 __________      ___________      __________________  
|Margerita |    |VegDelight |    |Extra Cheese      |
|__________|    |___________|    |__________________|
|cost(){   |    |cost(){    |    |BasePizza pizza   |
|return 100|    | return 200|    | cost(){          |
|   }      |    |     }     |    |return pizza.cost | 
|__________|    |___________|    |  +10             |
                                 |__________________|




public abstract class BasePizza {

 public abstract int cost();
}


public class Farmhouse extends BasePizza {

@Override
public int cost() {

 return 200;
}

}


public class VegDelight extends BasePizza {

@Override
public int cost() {

  return 120;
}

}


public class Margherita extends BasePizza {

 @Override
public int cost() {
  return 100;
}
}



public abstract class ToppingDecorator extends BasePizza {

}


public class ExtraCheese extends ToppingDecorator {

BasePizza basePizza;

public ExtraCheese(BasePizza pizza) {
  this.basePizza = pizza;
}

@Override
public int cost() {

 return basePizza.cost() + 10;

}
}


public class Mushroom extends ToppingDecorator {

BasePizza basePizza;

public Mushroom(BasePizza pizza) {
  this.basePizza = pizza;
}

@Override
public int cost() {

 return basePizza.cost() + 15;

}
}
     
                                  